[xdebug]
zend_extension=/usr/lib/php7/modules/xdebug.so
xdebug.remote_host = host.docker.internal
xdebug.remote_log = /tmp/xdebug.log
xdebug.remote_enable = 1

# You can customize the Xdebug configuration starting from this line.
# ---------------------------------------------------------------------------------------------------------------------

# If values are changed, you would need to rebuild the containers.
xdebug.remote_port = 9000

# Normally you need to use a specific HTTP GET/POST variable to start remote debugging. When this  setting is set to 1,
# Xdebug will always attempt to start a remote debugging session and try to connect to a client, even if the
# GET/POST/COOKIE variable was not present.
xdebug.remote_autostart = 1

# The IDE key which should match the XDEBUG_SESSION cookie value
# If you want to use an extension like Xdebug Helper, you should use this IDEKEY in the extension configuration and
# set previous setting to false: xdebug.remote_autostart = 0, so the debugging session only starts when you activate
# debugging using the extension.
xdebug.idekey="PHPSTORM"

# Controls the protection mechanism for infinite recursion protection. The value of this setting is the maximum level
# of nested functions that are allowed before the script will be aborted.
xdebug.max_nesting_level = 2500

# If enabled, the xdebug.remote_host setting is ignored and Xdebug will try to connect to the client that made the
# HTTP request. It checks the _SERVER: HTTP_X_FORWARDED_FOR and REMOTE_ADDR variables to find out which
# IP address to use.
xdebug.remote_connect_back = 0

# This setting is to be used in combination with previous setting set to true: xdebug.remote_connect_back = 1.
# xdebug.remote_addr_header = host.docker.internal ;

# If this setting is set to false, then Xdebug will not set-up internal structures to allow code coverage. This speeds
# up Xdebug quite a bit, but of course, Code Coverage Analysis won't work.
# https://xdebug.org/docs/code_coverage
xdebug.coverage_enable = 0

# Controls how many nested levels of array elements and object properties are when variables are displayed with either
# xdebug_var_dump, xdebug.show_local_vars or through Function Traces.
xdebug.var_display_max_depth=6

# When this setting is set to something different than 0 Xdebug's generated stack dumps in error situations will also
# show all variables in the top-most scope. Beware that this might generate a lot of information, and is therefore
# turned off by default.
xdebug.show_local_vars=0

# Xdebug replaces PHP's var_dump function for displaying variables. Xdebug's version includes different colors for
# different types and places limits on the amount of array elements/object properties, maximum depth and string lengths.
# There are a few other functions dealing with variable display as well.
xdebug.overload_var_dump=1

# Xdebug Profiling.
# https://xdebug.org/docs/profiler
xdebug.profiler_enable=0
xdebug.profiler_output_dir=/tmp/profiler